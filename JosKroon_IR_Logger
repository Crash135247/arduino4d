/*

 * SD card attached to SPI bus as follows:
 This SD card has ben modified to use CS of 8
 This code written from new, embellished from other code and directly copied where needed.
 The project combins a UNO with a SD card writer & Real Time Clock,
 Seeed 128*64 OLED, two Melexis MLX90614 IR temperature sensors, two NEOPIXEL 
LED arrays for cockpit display and a TEMT6000X0X light sensor to auto-dim LED arrays.
 It is designed to read the tyre temperatures and write the result to an
 SD card every 400ms and display the result on two LED arrays.

 This code is in the public domain.

 */
// Drivers
#include <SPI.h> // SD
#include <SD.h>  // SD
#include <Wire.h>  // SCL & SDA control
#include "RTClib.h" // Real Time clock
#include <SoftwareSerial.h> // for oled
#include <Adafruit_NeoPixel.h> // For LED arrays
#define PIN            6       // The data pin for LEDs
#define NUMPIXELS      16      // number of LEDs
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

#include "Suli.h"  // oled
#include "OLED_128x64_Arduino.h" // OLED
#include "OLED_128x64_Suli.h" // OLED

#include <Adafruit_MLX90614.h>  // IR Sensor
const int DEV1 (0X5A);
const int  DEV2 (0X55);
Adafruit_MLX90614 mlx = Adafruit_MLX90614(DEV1);
Adafruit_MLX90614 mlx2 = Adafruit_MLX90614(DEV2);


RTC_DS1307 rtc; // Fire up the Real Time Clock
SeeedOLED oled; // Start mini-display

File myFile;    // Give the file an alias

char filename[] = "IR/IR000000.CSV"; // Just a template for the real thing
int vowel = 101;
int vowel2 = 101;
int vowel0 = 101;
long int m = 0;
long int m2 = 0;
long int x = 0;
double t1 = 0;
double t12 = 0;
double t13 = 0;
double t2 = 0;
double t22 = 0;
double t23 = 0;

int t2whole = 0;
int t2rem = 0;
int t2whole2 = 0;
int t2rem2 = 0;
int t2whole3 = 0;
int t2rem3 = 0;
// Brightness
int b1 = 120;
int b2 = 190;
int level = 120;


// Temperature Setpoints
int flashPt[] = {
  10, 20, 30, 40, 50, 60, 70, 80, 90
};
// The 3rd LED is shown as orange so as two leds are on therefore shown at 1/2 brightness
int Red[] = {
  0, 0, b1 / 2,   0,  0, 0, b2, b2
};
int Green[] = {
  0, 0, b1 / 2, b1, b1, b1,  0,  0
};
int Blue[] = {
  b1, b1, 0,  0,  0,  0,  0,  0
};
// Screen Array of Temps
int bs = 16; // Number of segments on OLED
int br = 100; // Max Range of bar graph
float blen = 0;  // Working variable
DateTime now;  // Get current date
double average1 = 21;  // This is used to bring average close to actual at the start
double average2 = 21;
double alpha = 0.75;   // Smoothing factor used 
double risingAlpha = 0.75;  // Sising Temperature is smoother differently to falling Temp
double fallingAlpha = 0.95;

int sensor = 1;
int FileError = 0;
// This SD card was altered to use CS 8
const int chipSelect = 8;

void setup()
{

  Wire.begin(); // Load SD
  mlx.begin();  // Start IR 1
  mlx2.begin();  // Start IR 2
  
  pixels.begin(); // This initializes the NeoPixel library.
  getBrightness(); // Read light sensor
  pixels.setBrightness(level); // Set the overall brightness
  testlights(); // Test the lights work


  // Open serial communications and wait for port to open:
//  Serial.begin(115200);
  // Start the clock
  rtc.begin();
  if (! rtc.isrunning()) {
//    Serial.println("RTC is NOT running!");
  }
  // following line sets the RTC to the date & time this sketch was compiled
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  // This line sets the RTC with an explicit date & time, for example to set
  // January 21, 2014 at 3am you would call:
  // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));

  //=========================================
  now = rtc.now();
  // Make the initial directory.
  //  If it exists - who cares - move on ok!
  SD.mkdir("/IR");
  // Create the filename according to some random parameters as the RTC doesn't translate well into a filename
  getFilename(filename);
  // set date time callback function for the file date and time written function
  // (It just writes the correct date to the file when it is first written)
  SdFile::dateTimeCallback(dateTime);

  m = millis();

  // On this Shield, CS is pin 8. It's set as an output by default.
  // Note that even if it's not used as the CS pin, the hardware SS pin
  // (10 on most Arduino boards, 53 on the Mega) must be left as an output
  // or the SD library functions will not work.
  pinMode(SS, OUTPUT);

  if (!SD.begin(chipSelect)) {
  }

  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  // Open the made up name
  myFile = SD.open(filename, FILE_WRITE);

  // if the file opened okay, write to it:
  if (myFile) {
    // Write the CSV header so it looks good when Excel opens it
    myFile.println("Date,Time,T1,T2,Millis");

    // close the file:
    myFile.close();
  }
  else {
    // if the file didn't open, print an error:
 ////     Serial.print(":(   Error on 2nd opening of ");
 ////     Serial.println(filename);

    delay(1000);
  }
  myFile = SD.open(filename, FILE_WRITE);
  m = millis();
  m2 = m;  //save time
  average1 = mlx.readObjectTempC();
  average2 = mlx2.readObjectTempC();

  //===========================
  oled.init();                            // initialze SEEED OLED display
  oled.clearDisplay();                    // clear the screen and set start position to top left corner
  oled.setNormalDisplay();                // Set display to normal mode (i.e non-inverse mode)
  oled.setBrightness(200);                // Duh. Setting brightness
  oled.setPageMode();                     // Set addressing mode to Page Mode
  oled.setTextXY(0, 0);                   // Set the cursor to Xth Page, Yth Column
  oled.putString("I/R Meter");         // Print the String

}

void loop()
{
  // if the file opened okay, write to it:
  if (myFile || FileError > 4 ) {
    if (true) {
      now = rtc.now();
      //    Store previous temps
      t13 = t12;
      t12 = t1;
      t23 = t22;
      t22 = t2;
      t1 = get1();              // Read Sensor 1
      t2 = get2();              // Read Sensor 2
      //
      writeToFile();
      printDetails();
      writeOled();
      // Refresh the led array
      updatedisplay();

      //  If there are multiple failures on the write to SD,
      //    count to 4 and then display temps with an error on the bottom of the screen
      if (FileError > 4) {
        oled.setTextXY(0, 7);
        oled.putString("No SD Card");
      }
      else {
        oled.setTextXY(0, 7);
        oled.putString("0.....50....100"); //Show a scale on the oled
      }
    }
  }
  else {
    // if the file didn't open, print an error:
 ////     Serial.print(filename);
 ////     Serial.println(" error opening    :-(");
    FileError++;
    delay(1000); // if there's an error - lets just slow down and have a good think about it ...
  }
  
}
  // ==========================================================================
  // If we've had less than 4 tries then try to write. If more than 4 tries have failed then give up and skip it
void writeToFile() {
     if (FileError < 4) {
        myFile.print(now.year(), DEC);
        myFile.print('/');
        myFile.print(now.month(), DEC);
        myFile.print('/');
        myFile.print(now.day(), DEC);
        myFile.print(',');
        myFile.print(now.hour(), DEC);
        myFile.print(':');
        myFile.print(now.minute(), DEC);
        myFile.print(':');
        myFile.print(now.second(), DEC);
        myFile.print(",");
        myFile.print(t1);
        myFile.print(",");
        myFile.print(t2);
        myFile.print(",");
        myFile.println(millis());
        myFile.flush(); // flush writes the buffer to the card
      }
}
  // ==========================================================================
  // For testing only ..
void printDetails() {
  
      // Print the serial port so we've got an idea of what's going on
      /*      Serial.print(now.year(), DEC);
            Serial.print('/');
            Serial.print(now.month(), DEC);
            Serial.print('/');
            Serial.print(now.day(), DEC);
            Serial.print(' ');
            Serial.print(now.hour(), DEC);
            Serial.print(':');
            Serial.print(now.minute(), DEC);
            Serial.print(':');
            Serial.print(now.second(),DEC);
            Serial.print(" T1 ");
            Serial.print(t1);
            Serial.print(" T2 ");
            Serial.print(t2);


            Serial.println();
      */
}
  // ==========================================================================
void writeOled() {
      oled.setTextXY(0, 1);
      oled.putNumber(now.hour());
      oled.putString(":");
      oled.putNumber(now.minute());
      oled.putString(".");
      if (now.second() < 10) {
        oled.setTextXY(6, 1);
        oled.putString("0");
        oled.setTextXY(7, 1);
      }
      oled.putNumber(now.second());
      oled.setTextXY(1, 2);
      oled.putString("T1");
      oled.setTextXY(10, 2);
      oled.putString("T2");

      oled.setTextXY(0, 3);
      oled.putFloat(t1);
      oled.setTextXY(9, 3);
      oled.putFloat(t2);

      // Calc horizontal bar graph value
      blen = t1 * bs / br;
      // blen is the percentage of the bar to display
      //  while x is less than blen, position an * on the screen
      //     when x > blen print a blank space - simples..
      for (int x = 0; x < bs; x++) {
        oled.setTextXY(x, 5);
        if (x < blen) {
          oled.putString("*");
        }
        else {
          oled.putString(" ");
        }
      }
      //
      blen = t2 * bs / br;
      for (int x = 0; x < bs; x++) {
        oled.setTextXY(x, 6);
        if (x < blen) {
          oled.putString("*");
        }
        else {
          oled.putString(" ");
        }
      }
}
// ==========================================================================
// Reads the I/R device #1.
double get1()
{
  double temp1 = mlx.readObjectTempC();
  // Smooth it out a bit in the smooth function
  temp1 = smooth(temp1, average1, sensor);
  // 
  return temp1;
}
//===========================================================================
// The sensor can also read ambient temperatures if this is required
double get1a()
{
  return mlx.readAmbientTempC();
}
//===========================================================================
// Reads the I/R device #2.
double get2()
{
  double  temp1 = mlx2.readObjectTempC();
  temp1++;  // Seems to be a degree difference between these two sensors
  temp1 = smooth(temp1, average2, sensor);
  return temp1;
}
//===========================================================================
// The sensor can also read ambient temperatures if this is required
double get2a()
{
  return mlx.readAmbientTempC();
}
//===========================================================================
// Smooths the reading by a different factor on a rising reading compared to a lowering value
// Parameters in are Temp average and which sensor.
// The parameters are suffixed with & as they are allowed to be altered by 
//   the function before being returned to the caller of the function
double smooth (double& smoothed, double& average, int sensor)
{
  alpha = risingAlpha;
  switch (sensor) {
    case 1:
      if (smoothed < t12) alpha = fallingAlpha;
      break;
    case 2:
      if (smoothed < t22) alpha = fallingAlpha;
      break;
  }
  // smoothed is the read of the sensor
  average = (alpha * smoothed) + ((1 - alpha) * average);  //exponential smoothing
  return (smoothed, average);
}
//===========================================================================
void getFilename(char *filename) {
  // Putting date and time into the file name was giving me rubbish so I'm
  // using  random character generator to create the file name.
  // This was generating some boring names so I decided to put a vowel in the 2nd and 3rd character.
  int vowel0 = 101;
  int vowel2 = 101;
  vowel = getvowel(vowel0);
  randomSeed(analogRead(0));
  vowel2 = getvowel(vowel0);

  // The filename incorporates the directory name always.
  // It is in the format of /IR/IR_CVCVC.cvs
  filename[0] = 'I';
  filename[1] = 'R';
  filename[2] = '/';
  filename[3] = 'I';
  filename[4] = 'R';
  filename[5] = '_';
  filename[6] = char(random(98, 122));
  filename[7] = char(vowel);
  filename[8] = char(random(98, 122));
  filename[9] = char(vowel2);
  filename[10] = char(random(98, 122));

  filename[11] = '.';
  filename[12] = 'C';
  filename[13] = 'S';
  filename[14] = 'V';
  return;
}
//------------------------------------------------------------------------------
// call back for file timestamps
// This bit of magic was found on the arduino forums and causes the file to be
// written with the correct time stamp
void dateTime(uint16_t* date, uint16_t* time) {
  DateTime now = rtc.now();

  // return date using FAT_DATE macro to format fields
  *date = FAT_DATE(now.year(), now.month(), now.day());

  // return time using FAT_TIME macro to format fields
  *time = FAT_TIME(now.hour(), now.minute(), now.second());
}
//------------------------------------------------------------------------------
int getvowel(int v1)
{
  randomSeed(analogRead(0));
  int v2 = 101;
  int v = random(1, 5);

  switch (v) {
    case 1:
      v2 = 97; //a
      break;
    case 2:
      v2 = 101; // e
      break;
    case 3:
      v2 = 105; // i
      break;
    case 4:
      v2 = 111; // o
      break;
    case 5:
      v2 = 117; // u
      break;
    default:
      v2 = 101; // e
  }
  return v2;
}
//================================================================
void testlights()
{

  // For a set of NeoPixels the first NeoPixel is 0, second is 1, all the way up to the count of pixels minus one.
  for (int i = 0; i < NUMPIXELS / 2; i++) {
    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    //      pixels.setPixelColor(i, pixels.Color(i*10,i*10,i*10))
    int ii = i / 3; // Divide the display into three even colours
    switch (ii) {
      case 0:
        pixels.setPixelColor(i, pixels.Color(0, 0, 50)); // Blue
        break;
      case 1:
        pixels.setPixelColor(i, pixels.Color(0, 50, 0)); // Green
        break;
      case 2:
        pixels.setPixelColor(i, pixels.Color(50, 0, 0));  // Red
        break;
    }
    pixels.show(); // This sends the updated pixel color to the hardware.
    delay(150); // Delay for a period of time (in milliseconds).
  }
  // For a set of NeoPixels the first NeoPixel is 0, second is 1, all the way up to the count of pixels minus one.
  // We are using two displays therefore 0 to 7 and then 8 to 15
  for (int i = 8; i < NUMPIXELS; i++) {
    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    int ii = (i - 8) / 3;
    switch (ii) {
      case 0:
        pixels.setPixelColor(i, pixels.Color(0, 0, 50));
        break;
      case 1:
        pixels.setPixelColor(i, pixels.Color(0, 50, 0));
        break;
      case 2:
        pixels.setPixelColor(i, pixels.Color(50, 0, 0));
        break;
    }
    pixels.show(); // This sends the updated pixel color to the hardware.
    delay(150); // Delay for a period of time (in milliseconds).
  }
  TurnOffLights();
}
//================================================================
// Lights off
void TurnOffLights()
{
  for (int i = 0; i < NUMPIXELS; i++) {
    pixels.setPixelColor(i, pixels.Color(0, 0, 0));
  }
  pixels.show();
}

//========================================================================================================
// pixels.show is to be used sparingly
// 
void updatedisplay()
{
  m = millis();
  // Brightness adjustments hapening all the time is annoying
  //   so we only update every 3 seconds
  if ( m>m2+3000) {
    getBrightness();
    pixels.setBrightness(level);
    m2=m;
  }
  for (int i = 0; i < 2; i++) {
    if (i == 0) t13 = t1;
    if (i == 1) t13 = t2;

    // 1st green light is on while very low temp to show system is on
    float rd = 1;

    // After starts the 1st light is the 1st in the list
    for (x = 0; x < 8; x++) {
      rd = 1;
      if ( t13 >= flashPt[x] )  {
        // rd = current temp - this flashpoint / next flashpoint - current flashpoint
        //     e.g    47 - 40 / 50 - 40  = .7 of the current range
        // therefore as temp increases the lights get brighter until it gets to max brightness.
        rd = (t13 - flashPt[x]) / (flashPt[x + 1] - flashPt[x]);
        if (rd > 1) rd = 1;
        pixels.setPixelColor(x + (i * 8), pixels.Color(Red[x]*rd, Green[x]*rd, Blue[x]*rd));
      }
      else {
        pixels.setPixelColor(x + (i * 8), pixels.Color(0, 0, 0));
        if ( t13 <= 10 ) {
          pixels.setPixelColor(x + (i * 8), pixels.Color(0, 255 - level, 0));
        }
      }
      pixels.show();
    }
  }
}
//==================================================
void getBrightness() {

  level = analogRead(A0);
  level = map(level, 0, 1023, 0, 255);
  //Failsafe
  if (level <= 0) level = 5;
  if (level >= 255)  level = 150;

}
